// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ª–∞–π–∫–∞
document.querySelectorAll('.like-post').forEach(button => {
    button.addEventListener('click', async function () {
        const postId = this.getAttribute('data-post-id');
        const likeIcon = this.querySelector('.like-icon');

        try {
            // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ª–∞–π–∫
            const response = await fetch(`/api/v1/post/${postId}/like`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                credentials: 'include', // –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫—É–∫–∏ (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è)
            });

            if (response.ok) {
                const data = await response.json(); // –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç { isLiked: boolean }

                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É
                likeIcon.textContent = data.isLiked ? '‚ù§Ô∏è' : 'ü§ç';
            } else {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–∞–π–∫–∞:', await response.text());
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞:', error);
        }
    });
});